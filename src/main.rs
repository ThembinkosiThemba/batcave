use std::{
    env, fs,
    io::{self, Write},
    path::Path,
    process::Command,
};

use colored::*;
use log::{error, info};
use simple_logger::SimpleLogger;

fn main() -> io::Result<()> {
    SimpleLogger::new().init().unwrap();
    print_banner();

    loop {
        let current_dir = env::current_dir()?;
        print!(
            "{} ",
            format!("ü¶á {}> ", current_dir.display())
                .bright_purple()
        );
        io::stdout().flush()?;

        let mut input = String::new();
        io::stdin().read_line(&mut input)?;

        let input = input.trim();

        if input == "exit" {
            println!("{}", "Exiting the Batcave...".bright_blue());
            break;
        }

        let output = execute_command(input);
        println!("{}", output.bright_white());
        info!("Executed command: {}", input);
    }
    Ok(())
}

fn execute_command(command: &str) -> String {
    let parts: Vec<&str> = command.split_whitespace().collect();

    if parts.is_empty() {
        return String::from("No command entered");
    }

    match parts[0] {
        "echo" => parts[1..].join(" "),
        "pwd" => env::current_dir()
            .map(|path| path.to_string_lossy().into_owned())
            .unwrap_or_else(|_| String::from("Failed to get current directory")),
        "cd" => change_directory(parts.get(1)),
        "ls" => list_directory(parts.get(1)),
        "mkdir" => create_directory(parts.get(1)),
        "rm" => remove_file_or_directory(parts.get(1)),
        "touch" => create_file(parts.get(1)),
        _ => {
            let output = Command::new(parts[0]).args(&parts[1..]).output();

            match output {
                Ok(output) => {
                    if output.status.success() {
                        String::from_utf8_lossy(&output.stdout).into_owned()
                    } else {
                        String::from_utf8_lossy(&output.stderr).into_owned()
                    }
                }
                Err(e) => format!("failed to exercute command: {}", e),
            }
        }
    }
}

fn print_banner() {
    println!(
        "{}",
        r#"
        ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì ‚ñà‚ñà‚ñë ‚ñà‚ñà ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñÑ‚ñÑ‚ñÑ‚ñÑ    ‚ñÑ‚ñÑ‚ñÑ     ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñÑ   ‚ñÑ‚ñÑ‚ñÑ    ‚ñà‚ñà‚ñí   ‚ñà‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà 
        ‚ñì  ‚ñà‚ñà‚ñí ‚ñì‚ñí‚ñì‚ñà‚ñà‚ñë ‚ñà‚ñà‚ñí‚ñì‚ñà   ‚ñÄ    ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñÑ   ‚ñì  ‚ñà‚ñà‚ñí ‚ñì‚ñí‚ñí‚ñà‚ñà‚ñÄ ‚ñÄ‚ñà  ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñÑ ‚ñì‚ñà‚ñà‚ñë   ‚ñà‚ñí‚ñì‚ñà   ‚ñÄ 
        ‚ñí ‚ñì‚ñà‚ñà‚ñë ‚ñí‚ñë‚ñí‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñà      ‚ñí‚ñà‚ñà‚ñí ‚ñÑ‚ñà‚ñà‚ñí‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ ‚ñí ‚ñì‚ñà‚ñà‚ñë ‚ñí‚ñë‚ñí‚ñì‚ñà    ‚ñÑ ‚ñí‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ‚ñì‚ñà‚ñà  ‚ñà‚ñí‚ñë‚ñí‚ñà‚ñà‚ñà   
        ‚ñë ‚ñì‚ñà‚ñà‚ñì ‚ñë ‚ñë‚ñì‚ñà ‚ñë‚ñà‚ñà ‚ñí‚ñì‚ñà  ‚ñÑ    ‚ñí‚ñà‚ñà‚ñë‚ñà‚ñÄ  ‚ñë‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñë ‚ñì‚ñà‚ñà‚ñì ‚ñë ‚ñí‚ñì‚ñì‚ñÑ ‚ñÑ‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñí‚ñà‚ñà ‚ñà‚ñë‚ñë‚ñí‚ñì‚ñà  ‚ñÑ 
          ‚ñí‚ñà‚ñà‚ñí ‚ñë ‚ñë‚ñì‚ñà‚ñí‚ñë‚ñà‚ñà‚ñì‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí   ‚ñë‚ñì‚ñà  ‚ñÄ‚ñà‚ñì ‚ñì‚ñà   ‚ñì‚ñà‚ñà‚ñí ‚ñí‚ñà‚ñà‚ñí ‚ñë ‚ñí ‚ñì‚ñà‚ñà‚ñà‚ñÄ ‚ñë ‚ñì‚ñà   ‚ñì‚ñà‚ñà‚ñí‚ñí‚ñÄ‚ñà‚ñë  ‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí
          ‚ñí ‚ñë‚ñë    ‚ñí ‚ñë‚ñë‚ñí‚ñë‚ñí‚ñë‚ñë ‚ñí‚ñë ‚ñë   ‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñÄ‚ñí ‚ñí‚ñí   ‚ñì‚ñí‚ñà‚ñë ‚ñí ‚ñë‚ñë   ‚ñë ‚ñë‚ñí ‚ñí  ‚ñë ‚ñí‚ñí   ‚ñì‚ñí‚ñà‚ñë‚ñë ‚ñê‚ñë  ‚ñë‚ñë ‚ñí‚ñë ‚ñë
            ‚ñë     ‚ñí ‚ñë‚ñí‚ñë ‚ñë ‚ñë ‚ñë  ‚ñë   ‚ñí‚ñë‚ñí   ‚ñë   ‚ñí   ‚ñí‚ñí ‚ñë   ‚ñë      ‚ñë  ‚ñí     ‚ñí   ‚ñí‚ñí ‚ñë‚ñë ‚ñë‚ñë   ‚ñë ‚ñë  ‚ñë
          ‚ñë       ‚ñë  ‚ñë‚ñë ‚ñë   ‚ñë       ‚ñë    ‚ñë   ‚ñë   ‚ñí    ‚ñë      ‚ñë          ‚ñë   ‚ñí     ‚ñë‚ñë     ‚ñë   
                  ‚ñë  ‚ñë  ‚ñë   ‚ñë  ‚ñë    ‚ñë            ‚ñë  ‚ñë        ‚ñë ‚ñë            ‚ñë  ‚ñë   ‚ñë     ‚ñë  ‚ñë
                                      ‚ñë                      ‚ñë                     ‚ñë         
        "#
        .bright_blue()
    );

    println!(
        "{}",
        "Welcome to the Batcave Terminal. Proceed with caution."
            .bright_yellow()
    );
}

fn change_directory(path: Option<&&str>) -> String {
    match path {
        Some(path) => {
            if let Err(e) = env::set_current_dir(path) {
                error!("Failed to change directory: {}", e);
                format!("Failed to change directory: {}", e)
            } else {
                String::new()
            }
        }
        None => {
            error!("cd: missing argument");
            String::from("cd: missing argument")
        }
    }
}

fn list_directory(path: Option<&&str>) -> String {
    let path = path.map(Path::new).unwrap_or_else(|| Path::new("."));
    match fs::read_dir(path) {
        Ok(entries) => entries
            .filter_map(Result::ok)
            .map(|entry| {
                let name = entry.file_name().to_string_lossy().into_owned();
                if entry.file_type().map(|ft| ft.is_dir()).unwrap_or(false) {
                    name.blue().to_string()
                } else {
                    name
                }
            })
            .collect::<Vec<_>>()
            .join("  "),
        Err(e) => {
            error!("Failed to list directory: {}", e);
            format!("Failed to list directory: {}", e)
        }
    }
}

fn create_directory(path: Option<&&str>) -> String {
    match path {
        Some(path) => {
            if let Err(e) = fs::create_dir(path) {
                error!("Failed to create directory: {}", e);
                format!("Failed to create directory: {}", e)
            } else {
                format!("Directory created: {}", path)
            }
        }
        None => {
            error!("mkdir: missing argument");
            String::from("mkdir: missing argument")
        }
    }
}

fn remove_file_or_directory(path: Option<&&str>) -> String {
    match path {
        Some(path) => {
            let path = Path::new(path);
            if path.is_dir() {
                if let Err(e) = fs::remove_dir_all(path) {
                    error!("Failed to remove directory: {}", e);
                    format!("Failed to remove directory: {}", e)
                } else {
                    format!("Directory removed: {}", path.display())
                }
            } else {
                if let Err(e) = fs::remove_file(path) {
                    error!("Failed to remove file: {}", e);
                    format!("Failed to remove file: {}", e)
                } else {
                    format!("File removed: {}", path.display())
                }
            }
        }
        None => {
            error!("rm: missing argument");
            String::from("rm: missing argument")
        }
    }
}

fn create_file(path: Option<&&str>) -> String {
    match path {
        Some(path) => {
            if let Err(e) = fs::File::create(path) {
                error!("Failed to create file: {}", e);
                format!("Failed to create file: {}", e)
            } else {
                format!("File created: {}", path)
            }
        }
        None => {
            error!("touch: missing argument");
            String::from("touch: missing argument")
        }
    }
}
